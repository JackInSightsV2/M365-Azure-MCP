name: Docker Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - 'docker-compose.yml'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image for scanning
        run: |
          docker build -t unified-microsoft-mcp:scan .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'unified-microsoft-mcp:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Trivy vulnerability scanner (JSON output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'unified-microsoft-mcp:scan'
          format: 'json'
          output: 'trivy-results.json'
          
      - name: Check for critical vulnerabilities
        id: vuln-check
        run: |
          critical_count=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
          high_count=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length')
          
          echo "critical_count=$critical_count" >> $GITHUB_OUTPUT
          echo "high_count=$high_count" >> $GITHUB_OUTPUT
          
          if [ "$critical_count" -gt 0 ]; then
            echo "❌ Found $critical_count critical vulnerabilities"
            exit 1
          elif [ "$high_count" -gt 5 ]; then
            echo "⚠️  Found $high_count high severity vulnerabilities (threshold: 5)"
            exit 1
          else
            echo "✅ Security scan passed"
          fi
          
      - name: Create security issue
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const trivyResults = JSON.parse(fs.readFileSync('trivy-results.json', 'utf8'));
            
            const criticalVulns = [];
            const highVulns = [];
            
            for (const result of trivyResults.Results || []) {
              for (const vuln of result.Vulnerabilities || []) {
                if (vuln.Severity === 'CRITICAL') {
                  criticalVulns.push(vuln);
                } else if (vuln.Severity === 'HIGH') {
                  highVulns.push(vuln);
                }
              }
            }
            
            let body = '## 🚨 Security Vulnerabilities Detected\n\n';
            body += `**Critical:** ${criticalVulns.length}\n`;
            body += `**High:** ${highVulns.length}\n\n`;
            
            if (criticalVulns.length > 0) {
              body += '### Critical Vulnerabilities\n';
              for (const vuln of criticalVulns.slice(0, 10)) {
                body += `- **${vuln.VulnerabilityID}** in \`${vuln.PkgName}\`: ${vuln.Title}\n`;
              }
              body += '\n';
            }
            
            if (highVulns.length > 0) {
              body += '### High Severity Vulnerabilities\n';
              for (const vuln of highVulns.slice(0, 10)) {
                body += `- **${vuln.VulnerabilityID}** in \`${vuln.PkgName}\`: ${vuln.Title}\n`;
              }
              body += '\n';
            }
            
            body += '### Action Required\n';
            body += '1. Review the security scan results\n';
            body += '2. Update vulnerable dependencies\n';
            body += '3. Rebuild and test the Docker image\n';
            body += '4. Close this issue once resolved\n\n';
            body += `**Scan Date:** ${new Date().toISOString()}\n`;
            body += `**Commit:** ${context.sha}\n`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Vulnerabilities Detected in Docker Image',
              body: body,
              labels: ['security', 'vulnerability', 'docker']
            });

  docker-bench-security:
    name: Docker Bench Security
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security || true
            
      - name: Upload Docker Bench results
        uses: actions/upload-artifact@v3
        with:
          name: docker-bench-security-results
          path: |
            docker-bench-security.log
            docker-bench-security.json
        continue-on-error: true 